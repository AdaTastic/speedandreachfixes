using System;
using System.Linq;
using System.Threading.Tasks;
using Mutagen.Bethesda;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;

namespace SpeedandReachFixes
{
    public class Program
    {
        private static Lazy<Settings> _settings = null!;
        private static Settings Settings => _settings.Value;
        
        public static Task<int> Main(string[] args)
        {
            return SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SpeedAndReachFixes.esp")
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .Run(args);
        }
        
        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            var count = 0; // initialize record counter
            // Change object reach
            if (Settings.GameSettings.ObjectHitWeaponReach)
            {
                state.PatchMod.GameSettings.Add(new GameSettingFloat(state.PatchMod.GetNextFormKey(), state.PatchMod.SkyrimRelease)
                {
                    EditorID = "fObjectHitWeaponReach",
                    Data = 81
                });
                state.PatchMod.GameSettings.Add(new GameSettingFloat(state.PatchMod.GetNextFormKey(), state.PatchMod.SkyrimRelease)
                {
                    EditorID = "fObjectHitTwoHandReach",
                    Data = 135
                });
                state.PatchMod.GameSettings.Add(new GameSettingFloat(state.PatchMod.GetNextFormKey(), state.PatchMod.SkyrimRelease)
                {
                    EditorID = "fObjectHitH2HReach",
                    Data = 61
                });
                count += 3;
            }
            // Change combat distance & bash reach
            foreach (var gmst in state.LoadOrder.PriorityOrder.GameSetting().WinningOverrides())
            {
                if (Settings.GameSettings.CombatDistance && (gmst.EditorID?.Contains("fCombatDistance") == true))
                {
                    var modifiedGmst = state.PatchMod.GameSettings.GetOrAddAsOverride(gmst);
                    ((GameSettingFloat)modifiedGmst).Data = 141;
                    ++count;
                }

                if (Settings.GameSettings.CombatBashReach && (gmst.EditorID?.Contains("fCombatBashReach") == true))
                {
                    var modifiedGmst = state.PatchMod.GameSettings.GetOrAddAsOverride(gmst);
                    ((GameSettingFloat)modifiedGmst).Data = 61;
                    ++count;
                }
            }

            // Apply weapon swing angle changes
            if (Settings.GameSettings.WeaponSwingAngleChanges)
            {
                foreach (var race in state.LoadOrder.PriorityOrder.Race().WinningOverrides())
                {
                    if (!race.HasKeyword(Skyrim.Keyword.ActorTypeNPC)) continue;

                    var modifiedRace = state.PatchMod.Races.GetOrAddAsOverride(race);

                    foreach (var attack in modifiedRace.Attacks.Where(attack => attack.AttackData != null))
                    {
                        attack.AttackData!.StrikeAngle += 7;
                        ++count;
                    }
                }
            }
            
            foreach (var weap in state.LoadOrder.PriorityOrder.WinningOverrides<IWeaponGetter>()) {
                if (weap.Data == null) continue;
                var weapon = state.PatchMod.Weapons.GetOrAddAsOverride(weap);
                
                if (Settings.ApplyChangesToWeapon(weapon)) {
                    Console.WriteLine("Successfully modified weapon: " + weapon.EditorID);
                    ++count;
                }
                else
                    state.PatchMod.Weapons.Remove(weap);
            }
            
            Console.WriteLine("Finished patching " + count + " records.");
        }
    }
}
